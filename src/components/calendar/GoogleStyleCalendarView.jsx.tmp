// src/components/calendar/GoogleStyleCalendarView.jsx
import React, { useState, useEffect, useRef } from 'react';
import { 
  Calendar, ChevronLeft, ChevronRight, Plus, Settings, 
  Search, HelpCircle, X, Edit, Trash, MoreVertical
} from 'lucide-react';

/**
 * GoogleStyleCalendarView - A component that mimics the Google Calendar interface
 * with support for week, month, and day views
 */
const GoogleStyleCalendarView = ({
  events = [],
  selectedDate = new Date(),
  onDateSelect,
  onViewChange,
  onEventClick,
  onEventEdit,
  onEventDelete,
  onAddEvent,
  familyMembers = [],
  loading = false,
  embedded = false,
  onClose
}) => {
  // State variables
  const [view, setView] = useState('week'); // week, month, day, 4days
  const [currentDate, setCurrentDate] = useState(selectedDate);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [showEventPopup, setShowEventPopup] = useState(false);
  const [popupPosition, setPopupPosition] = useState({ x: 0, y: 0 });
  const [currentTime, setCurrentTime] = useState(new Date());
  const [eventsCache, setEventsCache] = useState([...events]); // Add local cache of events
  const timeGridRef = useRef(null);
  
  // Helper to format date for display in header
  const formatHeaderDate = () => {
    const options = { month: 'long', year: 'numeric' };
    return currentDate.toLocaleDateString('en-US', options);
  };
  
  // Navigate to today
  const goToToday = () => {
    setCurrentDate(new Date());
    if (onDateSelect) {
      onDateSelect(new Date());
    }
  };
  
  // Navigate previous/next based on current view
  const goToPrevious = () => {
    const newDate = new Date(currentDate);
    if (view === 'month') {
      newDate.setMonth(newDate.getMonth() - 1);
    } else if (view === 'week') {
      newDate.setDate(newDate.getDate() - 7);
    } else if (view === 'day') {
      newDate.setDate(newDate.getDate() - 1);
    } else if (view === '4days') {
      newDate.setDate(newDate.getDate() - 4);
    }
    setCurrentDate(newDate);
    if (onDateSelect) {
      onDateSelect(newDate);
    }
  };
  
  const goToNext = () => {
    const newDate = new Date(currentDate);
    if (view === 'month') {
      newDate.setMonth(newDate.getMonth() + 1);
    } else if (view === 'week') {
      newDate.setDate(newDate.getDate() + 7);
    } else if (view === 'day') {
      newDate.setDate(newDate.getDate() + 1);
    } else if (view === '4days') {
      newDate.setDate(newDate.getDate() + 4);
    }
    setCurrentDate(newDate);
    if (onDateSelect) {
      onDateSelect(newDate);
    }
  };
  
  // Change the current view
  const changeView = (newView) => {
    setView(newView);
    if (onViewChange) {
      onViewChange(newView);
    }
  };
  
  // Handle event click
  const handleEventClick = (event, e) => {
    // Prevent propagation so it doesn't trigger day click
    if (e) {
      e.stopPropagation();
    }
    
    // Get popup position
    let x = 0;
    let y = 0;
    if (e) {
      const rect = e.currentTarget.getBoundingClientRect();
      const containerRect = document.getElementById('calendar-container').getBoundingClientRect();
      
      x = rect.left - containerRect.left + rect.width / 2;
      y = rect.top - containerRect.top;
      
      // Adjust if popup would go off screen
      if (x + 300 > containerRect.width) {
        x = Math.max(0, containerRect.width - 300);
      }
    }
    
    setPopupPosition({ x, y });
    setSelectedEvent(event);
    setShowEventPopup(true);
    
    if (onEventClick) {
      onEventClick(event);
    }
  };
  
  // Handle event edit
  const handleEditEvent = (e) => {
    e.stopPropagation();
    if (onEventEdit && selectedEvent) {
      onEventEdit(selectedEvent);
    }
    setShowEventPopup(false);
  };
  
  // Handle event delete
  const handleDeleteEvent = (e) => {
    e.stopPropagation();
    if (onEventDelete && selectedEvent) {
      onEventDelete(selectedEvent);
    }
    setShowEventPopup(false);
  };
  
  // Handle click on a day in the calendar
  const handleDayClick = (date) => {
    setCurrentDate(date);
    if (onDateSelect) {
      onDateSelect(date);
    }
  };
  
  // Helper to get initials from name
  const getInitials = (name) => {
    if (!name) return '';
    return name.split(' ').map(n => n[0]).join('');
  };
  
  // Helper to determine if a date is today
  const isToday = (date) => {
    const today = new Date();
    return date.getDate() === today.getDate() &&
      date.getMonth() === today.getMonth() &&
      date.getFullYear() === today.getFullYear();
  };
  
  // Helper to determine if a date/time is in the past
  const isPast = (date) => {
    const now = new Date();
    if (date instanceof Date) {
      return date < now;
    }
    try {
      const eventDate = new Date(date);
      return !isNaN(eventDate.getTime()) && eventDate < now;
    } catch (e) {
      return false;
    }
  };
  
  // Helper to determine if a date is the selected date
  const isSelectedDate = (date) => {
    return date.getDate() === currentDate.getDate() &&
      date.getMonth() === currentDate.getMonth() &&
      date.getFullYear() === currentDate.getFullYear();
  };
  
  // Format time for display
  const formatTime = (date) => {
    return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
  };
  
  // Get events for a specific date with improved date handling
  const getEventsForDate = (date) => {
    // Force date normalization to prevent edge cases
    const targetDate = new Date(date);
    
    // Use the latest events from props or our local cache
    const eventsToFilter = eventsCache.length > 0 ? eventsCache : events;
    
    console.log(`📅 Filtering events for date: ${targetDate.toDateString()}, total events: ${eventsToFilter.length}`);
    
    // Get the date component only (without time)
    const targetDateString = targetDate.toDateString();
    
    return eventsToFilter.filter(event => {
      let eventDate = null;
      
      // Try to get the event date from various properties
      try {
        // IMPROVED: Handle all possible date field formats comprehensively
        if (event.dateObj instanceof Date && !isNaN(event.dateObj.getTime())) {
          eventDate = event.dateObj;
        } else if (event.start?.dateTime) {
          eventDate = new Date(event.start.dateTime);
        } else if (typeof event.dateTime === 'string') {
          eventDate = new Date(event.dateTime);
        } else if (event.dateTime instanceof Date) {
          eventDate = event.dateTime;
        } else if (event.date) {
          eventDate = new Date(event.date);
        } else if (event.extraDetails?.savedDate) {
          // This is a backup field we added for improved persistence
          eventDate = new Date(event.extraDetails.savedDate);
        } else {
          // No valid date found
          console.log(`📅 Event missing date information:`, event.title || "Untitled");
          return false;
        }
        
        // Check for invalid dates
        if (isNaN(eventDate.getTime())) {
          console.log(`📅 Invalid date detected for event:`, event.title || "Untitled");
          return false;
        }
        
        // Compare dates using date strings to ignore time component
        const eventDateString = eventDate.toDateString();
        
        const isMatch = eventDateString === targetDateString;
        
        // Debug match info selectively
        if (isMatch) {
          console.log(`📅 Event "${event.title || 'Untitled'}" matches date ${targetDateString}`);
        }
        
        return isMatch;
      } catch (error) {
        console.error("Error processing date for event:", event.title, error);
        return false;
      }
    });
  };
  
  // Get the event color based on type
  const getEventColor = (event) => {
    switch (event.eventType || event.category) {
      case 'appointment':
        return 'bg-red-100 border-red-200 text-red-800';
      case 'activity':
        return 'bg-green-100 border-green-200 text-green-800';
      case 'birthday':
        return 'bg-purple-100 border-purple-200 text-purple-800';
      case 'meeting':
        return 'bg-amber-100 border-amber-200 text-amber-800';
      case 'date-night':
        return 'bg-pink-100 border-pink-200 text-pink-800';
      case 'task':
        return 'bg-blue-100 border-blue-200 text-blue-800';
      default:
        return 'bg-gray-100 border-gray-200 text-gray-800';
    }
  };
  
  // Get hours for day/week view
  const hours = Array.from({ length: 24 }, (_, i) => i);
  
  // Get 30-minute time slots for day/week view
  const timeSlots = hours.flatMap(hour => [
    `${hour}:00`,
    `${hour}:30`
  ]);
  
  // Get days of the week for week view
  const getDaysOfWeek = () => {
    const days = [];
    const firstDayOfWeek = new Date(currentDate);
    
    // Adjust to first day (Sunday) of the current week
    const day = currentDate.getDay();
    firstDayOfWeek.setDate(currentDate.getDate() - day);
    
    // Create array of 7 days starting from Sunday
    for (let i = 0; i < 7; i++) {
      const date = new Date(firstDayOfWeek);
      date.setDate(firstDayOfWeek.getDate() + i);
      days.push(date);
    }
    
    return days;
  };
  
  // Get days of the month for month view
  const getDaysOfMonth = () => {
    const days = [];
    
    // Create a date for the first day of the month
    const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    
    // Get the day of the week for the first day (0 = Sunday, 6 = Saturday)
    const firstDayOfWeek = firstDayOfMonth.getDay();
    
    // Add days from previous month to fill the first week
    const lastDayOfPrevMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);
    const daysInPrevMonth = lastDayOfPrevMonth.getDate();
    
    for (let i = 0; i < firstDayOfWeek; i++) {
      const day = daysInPrevMonth - firstDayOfWeek + i + 1;
      const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, day);
      days.push({ date, isPreviousMonth: true });
    }
    
    // Add all days of the current month
    const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    const daysInMonth = lastDayOfMonth.getDate();
    
    for (let i = 1; i <= daysInMonth; i++) {
      const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);
      days.push({ date, isCurrentMonth: true });
    }
    
    // Add days from next month to fill the last row
    const totalDaysSoFar = firstDayOfWeek + daysInMonth;
    const remainingDays = 7 - (totalDaysSoFar % 7);
    
    if (remainingDays < 7) {
      for (let i = 1; i <= remainingDays; i++) {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, i);
        days.push({ date, isNextMonth: true });
      }
    }
    
    return days;
  };
  
  // Sort events by start time
  const sortEventsByStartTime = (events) => {
    return [...events].sort((a, b) => {
      const getTime = (event) => {
        if (event.dateObj instanceof Date) {
          return event.dateObj.getTime();
        } else if (event.start?.dateTime) {
          return new Date(event.start.dateTime).getTime();
        } else if (event.dateTime) {
          return new Date(event.dateTime).getTime();
        } else if (event.date) {
          return new Date(event.date).getTime();
        }
        return 0;
      };
      
      return getTime(a) - getTime(b);
    });
  };
  
  // Close event popup when clicked outside
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (showEventPopup && !e.target.closest('.event-popup') && !e.target.closest('.calendar-event')) {
        setShowEventPopup(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showEventPopup]);
  
  // Update our events cache when the events prop changes (only)
  useEffect(() => {
    console.log("📅 Updating eventsCache due to events change");
    setEventsCache(events);
  }, [events]);

  // Update current time and scroll to it
  useEffect(() => {
    const updateCurrentTime = () => {
      setCurrentTime(new Date());
    };
    
    // Update current time every minute
    updateCurrentTime();
    const intervalId = setInterval(updateCurrentTime, 60000);
    
    // Scroll to current time on initial render and when view changes
    const scrollToCurrentTime = () => {
      if (timeGridRef.current && (view === 'week' || view === 'day' || view === '4days')) {
        const now = new Date();
        const minutesSinceMidnight = now.getHours() * 60 + now.getMinutes();
        const scrollPosition = (minutesSinceMidnight / 60) * 60;
        
        // Scroll to position the current time in the middle of the visible area
        const containerHeight = timeGridRef.current.clientHeight;
        timeGridRef.current.scrollTop = Math.max(0, scrollPosition - containerHeight / 2);
      }
    };
    
    // Initial scroll after render
    setTimeout(scrollToCurrentTime, 300);
    
    return () => {
      clearInterval(intervalId);
    };
  }, [view]);

  // Keep the calendar in sync with the selected date from props
  useEffect(() => {
    // Update our internal date state when selectedDate from props changes
    setCurrentDate(new Date(selectedDate));
    
    // If there's an open popup, close it when date changes
    if (showEventPopup) {
      setShowEventPopup(false);
      setSelectedEvent(null);
    }
  }, [selectedDate, showEventPopup]);
  
  // Calculate position and height for events in week/day view
  const calculateEventPosition = (event, dayOfWeek) => {
    let eventDate;
    let eventEndDate;
    
    // Get event start time
    if (event.dateObj instanceof Date) {
      eventDate = event.dateObj;
    } else if (event.start?.dateTime) {
      eventDate = new Date(event.start.dateTime);
    } else if (event.dateTime) {
      eventDate = new Date(event.dateTime);
    } else if (event.date) {
      eventDate = new Date(event.date);
    } else {
      return { top: 0, height: 60 }; // Default position
    }
    
    // Get event end time
    if (event.dateEndObj instanceof Date) {
      eventEndDate = event.dateEndObj;
    } else if (event.end?.dateTime) {
      eventEndDate = new Date(event.end.dateTime);
    } else if (event.endDateTime) {
      eventEndDate = new Date(event.endDateTime);
    } else {
      // Default to 1 hour duration
      eventEndDate = new Date(eventDate);
      eventEndDate.setHours(eventDate.getHours() + 1);
    }
    
    // Calculate position based on time
    const minutesSinceMidnight = eventDate.getHours() * 60 + eventDate.getMinutes();
    const durationMinutes = (eventEndDate.getTime() - eventDate.getTime()) / (60 * 1000);
    
    // Each hour is 60px height
    const top = (minutesSinceMidnight / 60) * 60;
    const height = Math.max(30, (durationMinutes / 60) * 60); // Minimum height of 30px
    
    return { top, height };
  };
  
  // Render month view
  const renderMonthView = () => {
    const days = getDaysOfMonth();
    const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    
    return (
      <div className="month-view">
        {/* Days of week header */}
        <div className="grid grid-cols-7 text-center font-medium text-sm text-gray-500 border-b">
          {daysOfWeek.map(day => (
            <div key={day} className="py-3">{day}</div>
          ))}
        </div>
        
        {/* Calendar grid */}
        <div className="grid grid-cols-7 grid-rows-6 h-full">
          {days.map(({ date, isCurrentMonth, isPreviousMonth, isNextMonth }, index) => {
            const dateEvents = getEventsForDate(date);
            const maxDisplayEvents = 3; // Maximum events to display per day
            const hasMoreEvents = dateEvents.length > maxDisplayEvents;
            
            return (
              <div
                key={index}
                onClick={() => handleDayClick(date)}
                className={`h-20 border-b border-r p-1 ${
                  isCurrentMonth ? 'bg-white' : 'bg-gray-50 text-gray-400'
                } ${isToday(date) ? 'bg-blue-50' : ''} ${
                  isSelectedDate(date) ? 'ring-2 ring-blue-500 ring-inset' : ''
                }`}
                data-testid="day-grid-cell"
                data-date={`${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`}
              >
                <div className="flex justify-between items-center mb-1 mt-1">
                  <span className={`text-sm font-medium ${
                    isToday(date) ? 'bg-blue-500 text-white rounded-full w-7 h-7 flex items-center justify-center' : ''
                  }`}>
                    {date.getDate()}
                  </span>
                </div>
                
                <div className="overflow-hidden space-y-1">
                  {sortEventsByStartTime(dateEvents).slice(0, maxDisplayEvents).map((event, idx) => {
                    // Check if event is in the past
                    const eventDate = event.dateObj instanceof Date ? 
                      event.dateObj : 
                      (event.start?.dateTime ? new Date(event.start.dateTime) : 
                       (typeof event.dateTime === 'string' ? new Date(event.dateTime) : null));
                    
                    const isEventInPast = eventDate ? isPast(eventDate) : false;
                    
                    return (
                      <div
                        key={`${event.id || event.firestoreId || idx}`}
                        onClick={(e) => handleEventClick(event, e)}
                        className={`calendar-event text-xs truncate px-1 rounded cursor-pointer ${getEventColor(event)} ${isEventInPast ? 'opacity-60' : ''}`}
                      >
                        {event.title || 'Untitled Event'}
                      </div>
                    );
                  })}
                  
                  {hasMoreEvents && (
                    <div className="text-xs text-gray-500 font-medium">
                      +{dateEvents.length - maxDisplayEvents} more
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );
  };
  
  // Render week view
  const renderWeekView = () => {
    const daysOfWeek = getDaysOfWeek();
    
    return (
      <div className="week-view h-full overflow-hidden flex flex-col">
        {/* Sticky header row with days */}
        <div className="grid grid-cols-8 border-b sticky top-0 bg-white z-10 shadow-sm">
          {/* Empty cell for time column */}
          <div className="h-18 border-r"></div>
          
          {/* Day headers */}
          {daysOfWeek.map((date, index) => {
            const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
            const dayNumber = date.getDate();
            const isDateToday = isToday(date);
            
            return (
              <div 
                key={index}
                className={`h-18 border-r flex flex-col items-center justify-center ${
                  isDateToday ? 'bg-blue-50' : ''
                }`}
                onClick={() => handleDayClick(date)}
              >
                <div className="text-sm text-gray-500 mb-1">{dayName}</div>
                <div className={`text-xl font-semibold ${
                  isDateToday ? 'bg-blue-500 text-white rounded-full w-10 h-10 flex items-center justify-center' : ''
                }`}>
                  {dayNumber}
                </div>
              </div>
            );
          })}
        </div>
        
        {/* Scrollable time grid */}
        <div className="overflow-y-auto flex-1" ref={timeGridRef}>
          <div className="grid grid-cols-8" style={{ minHeight: '1000px' }}>
            {/* Time column - with larger font and no border lines */}
            <div className="border-r">
              {/* Time labels */}
              {hours.map(hour => (
                <div key={hour} className="relative h-[60px]">
                  <span className="absolute -top-3 right-2 text-sm font-medium text-gray-600">
                    {hour === 0 ? '12 AM' : hour < 12 ? `${hour} AM` : hour === 12 ? '12 PM' : `${hour-12} PM`}
                  </span>
                </div>
              ))}
            </div>
            
            {/* Days columns */}
            {daysOfWeek.map((date, index) => {
              const dateEvents = getEventsForDate(date);
              const isDateToday = isToday(date);
              const isLastColumn = index === daysOfWeek.length - 1;
              
              return (
                <div key={index} className={`relative ${!isLastColumn ? 'border-r' : ''}`}>
                  {/* Time grid for this day */}
                  <div className="relative">
                    {hours.map(hour => (
                      <div key={hour} className="h-[60px] border-b hover:bg-gray-50"></div>
                    ))}
                    
                    {/* Current time indicator for today */}
                    {isDateToday && (
                      <div 
                        className="absolute left-0 right-0 z-10"
                        style={{ 
                          top: `${(currentTime.getHours() * 60 + currentTime.getMinutes()) / 60 * 60}px` 
                        }}
                      >
                        <div className="flex items-center">
                          <div className="bg-red-500 rounded-full w-3 h-3 ml-1"></div>
                          <div className="bg-red-500 h-[2px] flex-grow"></div>
                        </div>
                      </div>
                    )}
                    
                    {/* Events for this day */}
                    {dateEvents.map((event, idx) => {
                      const { top, height } = calculateEventPosition(event);
                      const eventTime = event.dateObj instanceof Date ? 
                        formatTime(event.dateObj) : 
                        (event.start?.dateTime ? formatTime(new Date(event.start.dateTime)) : '');
                      
                      // Check if event is in the past
                      const eventDate = event.dateObj instanceof Date ? 
                        event.dateObj : 
                        (event.start?.dateTime ? new Date(event.start.dateTime) : 
                         (typeof event.dateTime === 'string' ? new Date(event.dateTime) : null));
                      
                      const isEventInPast = eventDate ? isPast(eventDate) : false;
                      
                      return (
                        <div
                          key={`${event.id || event.firestoreId || idx}`}
                          className={`calendar-event absolute left-0 right-0 mx-1 p-1 rounded cursor-pointer overflow-hidden ${getEventColor(event)} ${isEventInPast ? 'opacity-60' : ''}`}
                          style={{ top: `${top}px`, height: `${height}px` }}
                          onClick={(e) => handleEventClick(event, e)}
                        >
                          <div className="text-xs font-medium truncate">{event.title || 'Untitled Event'}</div>
                          {height > 40 && (
                            <div className="text-xs truncate">{eventTime}</div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    );
  };
  
  // Render day view
  const renderDayView = () => {
    const dateEvents = getEventsForDate(currentDate);
    const dayName = currentDate.toLocaleDateString('en-US', { weekday: 'long' });
    const dayNumber = currentDate.getDate();
    const monthName = currentDate.toLocaleDateString('en-US', { month: 'long' });
    const isCurrentDateToday = isToday(currentDate);
    
    return (
      <div className="day-view h-full overflow-hidden flex flex-col">
        {/* Sticky header row with day */}
        <div className="grid grid-cols-2 border-b sticky top-0 bg-white z-10 shadow-sm">
          {/* Empty cell for time column */}
          <div className="h-18 border-r"></div>
          
          {/* Day header */}
          <div className={`h-18 border-b flex flex-col items-center justify-center ${
            isCurrentDateToday ? 'bg-blue-50' : ''
          }`}>
            <div className="text-lg">{dayName}</div>
            <div className={`text-2xl font-semibold mt-1 ${
              isCurrentDateToday ? 'bg-blue-500 text-white rounded-full w-12 h-12 flex items-center justify-center' : ''
            }`}>
              {dayNumber}
            </div>
          </div>
        </div>
        
        {/* Scrollable time grid */}
        <div className="overflow-y-auto flex-1" ref={timeGridRef}>
          <div className="grid grid-cols-2" style={{ minHeight: '1000px' }}>
            {/* Time column - with larger font and no border lines */}
            <div className="border-r">
              {/* Time labels */}
              {hours.map(hour => (
                <div key={hour} className="relative h-[60px]">
                  <span className="absolute -top-3 right-2 text-sm font-medium text-gray-600">
                    {hour === 0 ? '12 AM' : hour < 12 ? `${hour} AM` : hour === 12 ? '12 PM' : `${hour-12} PM`}
                  </span>
                </div>
              ))}
            </div>
            
            {/* Day column */}
            <div className="relative">
              {/* Time grid for this day */}
              <div className="relative">
                {hours.map(hour => (
                  <div key={hour} className="h-[60px] border-b hover:bg-gray-50"></div>
                ))}
                
                {/* Current time indicator for today */}
                {isCurrentDateToday && (
                  <div 
                    className="absolute left-0 right-0 z-10"
                    style={{ 
                      top: `${(currentTime.getHours() * 60 + currentTime.getMinutes()) / 60 * 60}px` 
                    }}
                  >
                    <div className="flex items-center">
                      <div className="bg-red-500 rounded-full w-3 h-3 ml-1"></div>
                      <div className="bg-red-500 h-[2px] flex-grow"></div>
                    </div>
                  </div>
                )}
                
                {/* Events for this day */}
                {dateEvents.map((event, idx) => {
                  const { top, height } = calculateEventPosition(event);
                  const eventTime = event.dateObj instanceof Date ? 
                    formatTime(event.dateObj) : 
                    (event.start?.dateTime ? formatTime(new Date(event.start.dateTime)) : '');
                  
                  // Check if event is in the past
                  const eventDate = event.dateObj instanceof Date ? 
                    event.dateObj : 
                    (event.start?.dateTime ? new Date(event.start.dateTime) : 
                     (typeof event.dateTime === 'string' ? new Date(event.dateTime) : null));
                  
                  const isEventInPast = eventDate ? isPast(eventDate) : false;
                  
                  return (
                    <div
                      key={`${event.id || event.firestoreId || idx}`}
                      className={`calendar-event absolute left-0 right-0 mx-1 p-1 rounded cursor-pointer overflow-hidden ${getEventColor(event)} ${isEventInPast ? 'opacity-60' : ''}`}
                      style={{ top: `${top}px`, height: `${height}px` }}
                      onClick={(e) => handleEventClick(event, e)}
                    >
                      <div className="text-xs font-medium truncate">{event.title || 'Untitled Event'}</div>
                      {height > 40 && (
                        <div className="text-xs truncate">{eventTime}</div>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };
  
  // Render 4-day view
  const render4DayView = () => {
    const days = [];
    for (let i = 0; i < 4; i++) {
      const date = new Date(currentDate);
      date.setDate(currentDate.getDate() + i);
      days.push(date);
    }
    
    return (
      <div className="four-day-view h-full overflow-hidden flex flex-col">
        {/* Sticky header row with days */}
        <div className="grid grid-cols-5 border-b sticky top-0 bg-white z-10 shadow-sm">
          {/* Empty cell for time column */}
          <div className="h-18 border-r"></div>
          
          {/* Day headers */}
          {days.map((date, index) => {
            const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
            const dayNumber = date.getDate();
            const isDateToday = isToday(date);
            
            return (
              <div 
                key={index}
                className={`h-18 border-r flex flex-col items-center justify-center ${
                  isDateToday ? 'bg-blue-50' : ''
                }`}
                onClick={() => handleDayClick(date)}
              >
                <div className="text-sm text-gray-500 mb-1">{dayName}</div>
                <div className={`text-xl font-semibold ${
                  isDateToday ? 'bg-blue-500 text-white rounded-full w-10 h-10 flex items-center justify-center' : ''
                }`}>
                  {dayNumber}
                </div>
              </div>
            );
          })}
        </div>
        
        {/* Scrollable time grid */}
        <div className="overflow-y-auto flex-1" ref={timeGridRef}>
          <div className="grid grid-cols-5" style={{ minHeight: '1000px' }}>
            {/* Time column - with larger font and no border lines */}
            <div className="border-r">
              {/* Time labels */}
              {hours.map(hour => (
                <div key={hour} className="relative h-[60px]">
                  <span className="absolute -top-3 right-2 text-sm font-medium text-gray-600">
                    {hour === 0 ? '12 AM' : hour < 12 ? `${hour} AM` : hour === 12 ? '12 PM' : `${hour-12} PM`}
                  </span>
                </div>
              ))}
            </div>
            
            {/* Days columns */}
            {days.map((date, index) => {
              const dateEvents = getEventsForDate(date);
              const isDateToday = isToday(date);
              const isLastColumn = index === days.length - 1;
              
              return (
                <div key={index} className={`relative ${!isLastColumn ? 'border-r' : ''}`}>
                  {/* Time grid for this day */}
                  <div className="relative">
                    {hours.map(hour => (
                      <div key={hour} className="h-[60px] border-b hover:bg-gray-50"></div>
                    ))}
                    
                    {/* Current time indicator for today */}
                    {isDateToday && (
                      <div 
                        className="absolute left-0 right-0 z-10"
                        style={{ 
                          top: `${(currentTime.getHours() * 60 + currentTime.getMinutes()) / 60 * 60}px` 
                        }}
                      >
                        <div className="flex items-center">
                          <div className="bg-red-500 rounded-full w-3 h-3 ml-1"></div>
                          <div className="bg-red-500 h-[2px] flex-grow"></div>
                        </div>
                      </div>
                    )}
                    
                    {/* Events for this day */}
                    {dateEvents.map((event, idx) => {
                      const { top, height } = calculateEventPosition(event);
                      const eventTime = event.dateObj instanceof Date ? 
                        formatTime(event.dateObj) : 
                        (event.start?.dateTime ? formatTime(new Date(event.start.dateTime)) : '');
                      
                      // Check if event is in the past
                      const eventDate = event.dateObj instanceof Date ? 
                        event.dateObj : 
                        (event.start?.dateTime ? new Date(event.start.dateTime) : 
                         (typeof event.dateTime === 'string' ? new Date(event.dateTime) : null));
                      
                      const isEventInPast = eventDate ? isPast(eventDate) : false;
                      
                      return (
                        <div
                          key={`${event.id || event.firestoreId || idx}`}
                          className={`calendar-event absolute left-0 right-0 mx-1 p-1 rounded cursor-pointer overflow-hidden ${getEventColor(event)} ${isEventInPast ? 'opacity-60' : ''}`}
                          style={{ top: `${top}px`, height: `${height}px` }}
                          onClick={(e) => handleEventClick(event, e)}
                        >
                          <div className="text-xs font-medium truncate">{event.title || 'Untitled Event'}</div>
                          {height > 40 && (
                            <div className="text-xs truncate">{eventTime}</div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    );
  };
  
  return (
    <div className="bg-white rounded-lg shadow-lg flex flex-col h-full" id="calendar-container" data-testid="calendar-container">
      {/* Calendar Header */}
      <div className="p-2 border-b flex items-center justify-between">
        <div className="flex items-center space-x-2">
          {!embedded && (
            <button 
              onClick={onClose}
              className="p-1 rounded hover:bg-gray-100"
            >
              <X size={16} />
            </button>
          )}
          <div className="text-xl font-medium flex items-center">
            <Calendar size={20} className="mr-2" />
            <span>Calendar</span>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          <button
            onClick={goToToday}
            className="px-4 py-1 text-sm border rounded hover:bg-gray-100"
          >
            Today
          </button>
          
          <button
            onClick={goToPrevious}
            className="p-1 rounded hover:bg-gray-100"
          >
            <ChevronLeft size={16} />
          </button>
          
          <button
            onClick={goToNext}
            className="p-1 rounded hover:bg-gray-100"
          >
            <ChevronRight size={16} />
          </button>
          
          <h2 className="text-lg font-medium">
            {formatHeaderDate()}
          </h2>
        </div>
        
        <div className="flex items-center space-x-2">
          {/* View options */}
          <div className="relative inline-block">
            <select
              value={view}
              onChange={(e) => changeView(e.target.value)}
              className="appearance-none bg-white border rounded px-4 py-1 text-sm pr-8"
            >
              <option value="day">Day</option>
              <option value="week">Week</option>
              <option value="month">Month</option>
              <option value="4days">4 days</option>
            </select>
            <ChevronLeft size={16} className="absolute right-2 top-1/2 transform -translate-y-1/2 rotate-90 text-gray-400" />
          </div>
          
          <button className="p-1 rounded hover:bg-gray-100">
            <Search size={16} />
          </button>
          
          <button className="p-1 rounded hover:bg-gray-100">
            <Settings size={16} />
          </button>
        </div>
      </div>
      
      {/* Calendar Body */}
      <div className="flex-1 overflow-hidden">
        {loading ? (
          <div className="h-full flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
          </div>
        ) : (
          <div className="h-full">
            {view === 'month' && renderMonthView()}
            {view === 'week' && renderWeekView()}
            {view === 'day' && renderDayView()}
            {view === '4days' && render4DayView()}
          </div>
        )}
      </div>
      
      {/* Add Event Button */}
      <div className="absolute bottom-4 right-4">
        <button
          onClick={() => onAddEvent && onAddEvent(new Date(currentDate))}
          className="bg-blue-500 text-white rounded-full p-3 shadow-lg hover:bg-blue-600"
        >
          <Plus size={20} />
        </button>
      </div>
      
      {/* Event Popup */}
      {showEventPopup && selectedEvent && (
        <div 
          className="event-popup absolute bg-white rounded-lg shadow-xl z-50 w-72 border overflow-hidden"
          style={{ 
            top: `${popupPosition.y}px`, 
            left: `${popupPosition.x}px`,
            transform: 'translate(-50%, -100%)' 
          }}
          data-testid="event-popup"
        >
          <div className="p-3 border-b">
            <div className="flex justify-between items-start">
              <h3 className="font-semibold">{selectedEvent.title || 'Untitled Event'}</h3>
              <button 
                onClick={() => setShowEventPopup(false)}
                className="text-gray-500 hover:text-gray-800"
              >
                <X size={16} />
              </button>
            </div>
            
            <div className="mt-2 text-sm text-gray-600">
              {selectedEvent.dateObj && (
                <div>
                  {new Date(selectedEvent.dateObj).toLocaleString('en-US', {
                    weekday: 'long',
                    month: 'long',
                    day: 'numeric',
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true
                  })}
                  {selectedEvent.dateEndObj && (
                    <span> - {new Date(selectedEvent.dateEndObj).toLocaleTimeString('en-US', {
                      hour: 'numeric',
                      minute: '2-digit',
                      hour12: true
                    })}</span>
                  )}
                </div>
              )}
            </div>
            
            {selectedEvent.location && (
              <div className="mt-1 text-sm text-gray-600">
                <div className="flex items-center">
                  <div className="mr-2">📍</div>
                  <div>{selectedEvent.location}</div>
                </div>
              </div>
            )}
            
            {selectedEvent.description && (
              <div className="mt-2 text-sm text-gray-600">
                {selectedEvent.description}
              </div>
            )}
          </div>
          
          <div className="flex justify-end p-2 bg-gray-50">
            <button
              onClick={handleEditEvent}
              className="text-blue-500 hover:bg-blue-50 p-1 rounded mr-2"
              data-testid="edit-event-button"
            >
              <Edit size={18} />
            </button>
            
            <button
              onClick={handleDeleteEvent}
              className="text-red-500 hover:bg-red-50 p-1 rounded"
              data-testid="delete-event-button"
            >
              <Trash size={18} />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default GoogleStyleCalendarView;